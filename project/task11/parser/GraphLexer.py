# Generated from project/task11/parser/Graph.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,250,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
        1,36,4,36,245,8,36,11,36,12,36,246,1,36,1,36,0,0,37,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        1,0,1,3,0,9,10,13,13,32,32,250,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,
        3,78,1,0,0,0,5,83,1,0,0,0,7,88,1,0,0,0,9,92,1,0,0,0,11,94,1,0,0,
        0,13,99,1,0,0,0,15,103,1,0,0,0,17,108,1,0,0,0,19,111,1,0,0,0,21,
        116,1,0,0,0,23,120,1,0,0,0,25,125,1,0,0,0,27,128,1,0,0,0,29,131,
        1,0,0,0,31,135,1,0,0,0,33,140,1,0,0,0,35,145,1,0,0,0,37,149,1,0,
        0,0,39,153,1,0,0,0,41,155,1,0,0,0,43,159,1,0,0,0,45,164,1,0,0,0,
        47,168,1,0,0,0,49,173,1,0,0,0,51,178,1,0,0,0,53,183,1,0,0,0,55,189,
        1,0,0,0,57,195,1,0,0,0,59,201,1,0,0,0,61,207,1,0,0,0,63,213,1,0,
        0,0,65,219,1,0,0,0,67,225,1,0,0,0,69,231,1,0,0,0,71,237,1,0,0,0,
        73,244,1,0,0,0,75,76,5,46,0,0,76,77,5,45,0,0,77,2,1,0,0,0,78,79,
        5,45,0,0,79,80,5,46,0,0,80,81,5,46,0,0,81,82,5,46,0,0,82,4,1,0,0,
        0,83,84,5,45,0,0,84,85,5,46,0,0,85,86,5,45,0,0,86,87,5,46,0,0,87,
        6,1,0,0,0,88,89,5,45,0,0,89,90,5,46,0,0,90,91,5,46,0,0,91,8,1,0,
        0,0,92,93,5,46,0,0,93,10,1,0,0,0,94,95,5,46,0,0,95,96,5,46,0,0,96,
        97,5,45,0,0,97,98,5,46,0,0,98,12,1,0,0,0,99,100,5,45,0,0,100,101,
        5,45,0,0,101,102,5,46,0,0,102,14,1,0,0,0,103,104,5,46,0,0,104,105,
        5,46,0,0,105,106,5,46,0,0,106,107,5,46,0,0,107,16,1,0,0,0,108,109,
        5,46,0,0,109,110,5,46,0,0,110,18,1,0,0,0,111,112,5,46,0,0,112,113,
        5,45,0,0,113,114,5,45,0,0,114,115,5,45,0,0,115,20,1,0,0,0,116,117,
        5,45,0,0,117,118,5,46,0,0,118,119,5,45,0,0,119,22,1,0,0,0,120,121,
        5,46,0,0,121,122,5,45,0,0,122,123,5,46,0,0,123,124,5,46,0,0,124,
        24,1,0,0,0,125,126,5,45,0,0,126,127,5,45,0,0,127,26,1,0,0,0,128,
        129,5,45,0,0,129,130,5,46,0,0,130,28,1,0,0,0,131,132,5,45,0,0,132,
        133,5,45,0,0,133,134,5,45,0,0,134,30,1,0,0,0,135,136,5,46,0,0,136,
        137,5,45,0,0,137,138,5,45,0,0,138,139,5,46,0,0,139,32,1,0,0,0,140,
        141,5,45,0,0,141,142,5,45,0,0,142,143,5,46,0,0,143,144,5,45,0,0,
        144,34,1,0,0,0,145,146,5,46,0,0,146,147,5,45,0,0,147,148,5,46,0,
        0,148,36,1,0,0,0,149,150,5,46,0,0,150,151,5,46,0,0,151,152,5,46,
        0,0,152,38,1,0,0,0,153,154,5,45,0,0,154,40,1,0,0,0,155,156,5,46,
        0,0,156,157,5,46,0,0,157,158,5,45,0,0,158,42,1,0,0,0,159,160,5,46,
        0,0,160,161,5,46,0,0,161,162,5,46,0,0,162,163,5,45,0,0,163,44,1,
        0,0,0,164,165,5,46,0,0,165,166,5,45,0,0,166,167,5,45,0,0,167,46,
        1,0,0,0,168,169,5,45,0,0,169,170,5,46,0,0,170,171,5,46,0,0,171,172,
        5,45,0,0,172,48,1,0,0,0,173,174,5,45,0,0,174,175,5,46,0,0,175,176,
        5,45,0,0,176,177,5,45,0,0,177,50,1,0,0,0,178,179,5,45,0,0,179,180,
        5,45,0,0,180,181,5,46,0,0,181,182,5,46,0,0,182,52,1,0,0,0,183,184,
        5,45,0,0,184,185,5,45,0,0,185,186,5,45,0,0,186,187,5,45,0,0,187,
        188,5,45,0,0,188,54,1,0,0,0,189,190,5,46,0,0,190,191,5,45,0,0,191,
        192,5,45,0,0,192,193,5,45,0,0,193,194,5,45,0,0,194,56,1,0,0,0,195,
        196,5,46,0,0,196,197,5,46,0,0,197,198,5,45,0,0,198,199,5,45,0,0,
        199,200,5,45,0,0,200,58,1,0,0,0,201,202,5,46,0,0,202,203,5,46,0,
        0,203,204,5,46,0,0,204,205,5,45,0,0,205,206,5,45,0,0,206,60,1,0,
        0,0,207,208,5,46,0,0,208,209,5,46,0,0,209,210,5,46,0,0,210,211,5,
        46,0,0,211,212,5,45,0,0,212,62,1,0,0,0,213,214,5,46,0,0,214,215,
        5,46,0,0,215,216,5,46,0,0,216,217,5,46,0,0,217,218,5,46,0,0,218,
        64,1,0,0,0,219,220,5,45,0,0,220,221,5,46,0,0,221,222,5,46,0,0,222,
        223,5,46,0,0,223,224,5,46,0,0,224,66,1,0,0,0,225,226,5,45,0,0,226,
        227,5,45,0,0,227,228,5,46,0,0,228,229,5,46,0,0,229,230,5,46,0,0,
        230,68,1,0,0,0,231,232,5,45,0,0,232,233,5,45,0,0,233,234,5,45,0,
        0,234,235,5,46,0,0,235,236,5,46,0,0,236,70,1,0,0,0,237,238,5,45,
        0,0,238,239,5,45,0,0,239,240,5,45,0,0,240,241,5,45,0,0,241,242,5,
        46,0,0,242,72,1,0,0,0,243,245,7,0,0,0,244,243,1,0,0,0,245,246,1,
        0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,6,
        36,0,0,249,74,1,0,0,0,2,0,246,1,6,0,0
    ]

class GraphLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    A = 1
    B = 2
    C = 3
    D = 4
    E = 5
    F = 6
    G = 7
    H = 8
    I = 9
    J = 10
    K = 11
    L = 12
    M = 13
    N = 14
    O = 15
    P = 16
    Q = 17
    R = 18
    S = 19
    T = 20
    U = 21
    V = 22
    W = 23
    X = 24
    Y = 25
    Z = 26
    ZERO = 27
    ONE = 28
    TWO = 29
    THREE = 30
    FOUR = 31
    FIVE = 32
    SIX = 33
    SEVEN = 34
    EIGHT = 35
    NINE = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.-'", "'-...'", "'-.-.'", "'-..'", "'.'", "'..-.'", "'--.'",
            "'....'", "'..'", "'.---'", "'-.-'", "'.-..'", "'--'", "'-.'",
            "'---'", "'.--.'", "'--.-'", "'.-.'", "'...'", "'-'", "'..-'",
            "'...-'", "'.--'", "'-..-'", "'-.--'", "'--..'", "'-----'",
            "'.----'", "'..---'", "'...--'", "'....-'", "'.....'", "'-....'",
            "'--...'", "'---..'", "'----.'" ]

    symbolicNames = [ "<INVALID>",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L",
            "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
            "Y", "Z", "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX",
            "SEVEN", "EIGHT", "NINE", "WS" ]

    ruleNames = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
                  "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
                  "W", "X", "Y", "Z", "ZERO", "ONE", "TWO", "THREE", "FOUR",
                  "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "WS" ]

    grammarFileName = "Graph.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
